{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport rootSaga from '../sagas'; //composeWithDevTools 개발자 도구에서 보이게\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\n// next-redux-wrapper는 유저가 페이지를 요청할때마다 리덕스 스토어를 생성해야 하기 때문에 configureStore함수를 정의해서 넘기는것이다.\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // next 는 액션을 다음 미들웨어에게 전달하는 함수입니다. next(action) 이런 형태로 사용합니다.\n  // 만약 다음 미들웨어가 없다면 리듀서에게 액션을 전달해줍니다. \n  //만약에 next 를 호출하지 않게 된다면 액션이 무시처리되어 리듀서에게로 전달되지 않습니다.\n  return next(action);\n};\n\nconst configureStore = () => {\n  //dispatch() 후 사가 or 썽크 호출됌\n  //middleware란? 리덕스의 기능을 업글!\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware]; //사가 or 썽크 (미들웨어)넣자 \n  //리덕스의 기능이 확장 된게 enhancer\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) //배포용 \n  : composeWithDevTools(applyMiddleware(...middlewares)); //개발용\n\n  const store = createStore(rootReducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; //createWrapper => next에 redux 추가.\n\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","rootReducer","composeWithDevTools","createSagaMiddleware","rootSaga","loggerMiddleware","dispatch","getState","next","action","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACvE;AACA;AACA;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CALD;;AAMA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACA;AACA,QAAMC,cAAc,GAAGR,oBAAoB,EAA3C;AACA,QAAMS,WAAW,GAAG,CAACD,cAAD,EAAiBN,gBAAjB,CAApB,CAJyB,CAI+B;AACxD;;AACA,QAAMQ,QAAQ,GAAG,QACXb,OAAO,CAACD,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CADI,CAC8B;AAD9B,IAEXV,mBAAmB,CAACH,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAFzB,CANyB,CAQkC;;AAE3D,QAAME,KAAK,GAAGhB,WAAW,CAACG,WAAD,EAAcY,QAAd,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBZ,QAAnB,CAAjB;AACA,SAAOU,KAAP;AACH,CAbD,C,CAeA;;;AACA,MAAMG,OAAO,GAAGpB,aAAa,CAACa,cAAD,EAAiB;AAC1CQ,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport rootSaga from '../sagas';\r\n\r\n//composeWithDevTools 개발자 도구에서 보이게\r\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\r\n// next-redux-wrapper는 유저가 페이지를 요청할때마다 리덕스 스토어를 생성해야 하기 때문에 configureStore함수를 정의해서 넘기는것이다.\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    // next 는 액션을 다음 미들웨어에게 전달하는 함수입니다. next(action) 이런 형태로 사용합니다.\r\n    // 만약 다음 미들웨어가 없다면 리듀서에게 액션을 전달해줍니다. \r\n    //만약에 next 를 호출하지 않게 된다면 액션이 무시처리되어 리듀서에게로 전달되지 않습니다.\r\n    return next(action);\r\n}\r\nconst configureStore = () => {\r\n    //dispatch() 후 사가 or 썽크 호출됌\r\n    //middleware란? 리덕스의 기능을 업글!\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, loggerMiddleware]; //사가 or 썽크 (미들웨어)넣자 \r\n    //리덕스의 기능이 확장 된게 enhancer\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares)) //배포용 \r\n        : composeWithDevTools(applyMiddleware(...middlewares)) //개발용\r\n\r\n    const store = createStore(rootReducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n}\r\n\r\n//createWrapper => next에 redux 추가.\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}