{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//노예이름\nvar LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nvar LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nvar LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nvar LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nvar LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nvar LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; //노예 생성함수\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: LOG_OUT_REQUEST\n  };\n};\nexport var logoutSuccessAction = function logoutSuccessAction(data) {\n  return {\n    type: LOG_OUT_SUCCESS,\n    data: data\n  };\n};\nexport var logoutFailureAction = function logoutFailureAction() {\n  return {\n    type: LOG_OUT_FAILURE\n  };\n}; //노예 생성 함수 return 함수\n// export const loginAction = (data) => {\n//     return (dispatch, getState) => {\n//         const state = getState();\n//         dispatch(loginRequestAction(data));\n//         axios.post('/api/login')\n//             .then((result) => {\n//                 dispatch(loginSuccessAction(result.data))\n//             })\n//             .catch((e) => {\n//                 dispatch(loginFailureAction(e))\n//             })\n//     }\n// }\n\nexport var initalState = {\n  isLoggingIn: false,\n  //로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false,\n  //로그아웃 시도중 \n  //시도중이 ture 면 로딩창을 띄울꺼임\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: true\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: 'zerocho'\n        })\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: false\n      });\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: true\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/user.js"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loginRequestAction","data","type","logoutRequestAction","logoutSuccessAction","logoutFailureAction","initalState","isLoggingIn","isLoggedIn","isLoggingOut","me","signUpData","loginData","reducer","state","action","nickname"],"mappings":";;;;;;AAAA;AACA,IAAMA,cAAc,GAAG,gBAAvB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,eAAe,GAAG,iBAAxB,C,CACA;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;AAAA,SAAW;AAAEC,IAAAA,IAAI,EAAER,cAAR;AAAwBO,IAAAA,IAAI,EAAJA;AAAxB,GAAX;AAAA,CAA3B;AAEP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AAAED,IAAAA,IAAI,EAAEL;AAAR,GAAP;AAAA,CAA5B;AACP,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACH,IAAD;AAAA,SAAW;AAAEC,IAAAA,IAAI,EAAEJ,eAAR;AAAyBG,IAAAA,IAAI,EAAJA;AAAzB,GAAX;AAAA,CAA5B;AACP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAO;AAAEH,IAAAA,IAAI,EAAEH;AAAR,GAAP;AAAA,CAA5B,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,IAAMO,WAAW,GAAG;AACvBC,EAAAA,WAAW,EAAE,KADU;AACJ;AACnBC,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,YAAY,EAAE,KAHS;AAGH;AACpB;AACAC,EAAAA,EAAE,EAAE,IALmB;AAMvBC,EAAAA,UAAU,EAAE,EANW;AAOvBC,EAAAA,SAAS,EAAE;AAPY,CAApB;;AAUP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAiC;AAAA,MAAhCC,KAAgC,uEAAxBR,WAAwB;AAAA,MAAXS,MAAW;;AAC7C,UAAQA,MAAM,CAACb,IAAf;AACI,SAAKR,cAAL;AACI,6CACOoB,KADP;AAEIP,QAAAA,WAAW,EAAE;AAFjB;;AAIJ,SAAKZ,cAAL;AACI,6CACOmB,KADP;AAEIP,QAAAA,WAAW,EAAE,KAFjB;AAGIC,QAAAA,UAAU,EAAE,IAHhB;AAIIE,QAAAA,EAAE,kCAAOK,MAAM,CAACd,IAAd;AAAoBe,UAAAA,QAAQ,EAAE;AAA9B;AAJN;;AAMJ,SAAKpB,cAAL;AACI,6CACOkB,KADP;AAEIP,QAAAA,WAAW,EAAE,KAFjB;AAGIC,QAAAA,UAAU,EAAE;AAHhB;;AAKJ,SAAKX,eAAL;AACI,6CACOiB,KADP;AAEIL,QAAAA,YAAY,EAAE;AAFlB;;AAIJ,SAAKX,eAAL;AACI,6CACOgB,KADP;AAEIL,QAAAA,YAAY,EAAE,KAFlB;AAGID,QAAAA,UAAU,EAAE,KAHhB;AAIIE,QAAAA,EAAE,EAAE;AAJR;;AAMJ,SAAKX,eAAL;AACI,6CACOe,KADP;AAEIL,QAAAA,YAAY,EAAE;AAFlB;;AAIJ;AAAS,aAAOK,KAAP;AApCb;AAsCH,CAvCD;;AAwCA,eAAeD,OAAf","sourcesContent":["//노예이름\r\nconst LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nconst LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nconst LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\nconst LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nconst LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nconst LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n//노예 생성함수\r\nexport const loginRequestAction = (data) => ({ type: LOG_IN_REQUEST, data });\r\n\r\nexport const logoutRequestAction = () => ({ type: LOG_OUT_REQUEST });\r\nexport const logoutSuccessAction = (data) => ({ type: LOG_OUT_SUCCESS, data });\r\nexport const logoutFailureAction = () => ({ type: LOG_OUT_FAILURE });\r\n\r\n//노예 생성 함수 return 함수\r\n// export const loginAction = (data) => {\r\n//     return (dispatch, getState) => {\r\n//         const state = getState();\r\n//         dispatch(loginRequestAction(data));\r\n//         axios.post('/api/login')\r\n//             .then((result) => {\r\n//                 dispatch(loginSuccessAction(result.data))\r\n//             })\r\n//             .catch((e) => {\r\n//                 dispatch(loginFailureAction(e))\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\nexport const initalState = {\r\n    isLoggingIn: false,//로그인 시도중\r\n    isLoggedIn: false,\r\n    isLoggingOut: false,//로그아웃 시도중 \r\n    //시도중이 ture 면 로딩창을 띄울꺼임\r\n    me: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n}\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n            }\r\n        case LOG_IN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isLoggedIn: true,\r\n                me: { ...action.data, nickname: 'zerocho' },\r\n            }\r\n        case LOG_IN_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isLoggedIn: false,\r\n            }\r\n        case LOG_OUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: true,\r\n            }\r\n        case LOG_OUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                isLoggedIn: false,\r\n                me: null,\r\n            }\r\n        case LOG_OUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}