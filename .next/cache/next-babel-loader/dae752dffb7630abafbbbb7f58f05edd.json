{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects'; // const addPostAPI = (data) => {\n//     return axios.post('/api/post', data);\n// }\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost, 2000);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","call","put","take","takeEvery","takeLatest","delay","action","addPostAPI","data","result","type","response"],"mappings":";;oDAMUA,O;qDAgBAC,Y;qDAIeC,Q;;AA1BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,SAArC,EAAgDC,UAAhD,EAA4DC,KAA5D,QAAyE,oBAAzE,C,CAEA;AACA;AACA;;AAEA,SAAUV,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMN,IAAI,CAACO,UAAD,EAAaD,MAAM,CAACE,IAApB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMR,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE,kBADA;AAENF,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMP,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE,kBADA;AAENF,YAAAA,IAAI,EAAE,YAAIG,QAAJ,CAAaH;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUZ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAAC,kBAAD,EAAqBT,OAArB,EAA8B,IAA9B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects';\r\n\r\n// const addPostAPI = (data) => {\r\n//     return axios.post('/api/post', data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: \"ADD_POST_SUCCESS\",\r\n            data: result.data,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"ADD_POST_FAILURE\",\r\n            data: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() { \r\n    yield takeLatest(\"ADD_POST_REQUEST\", addPost, 2000);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}