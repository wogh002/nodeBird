{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // const addPostAPI = (data) => {\n//     return axios.post('/api/post', data);\n// }\n// const addCommentAPI = (data) => {\n//     return axios.post('/api/post/${data.postId}/comment', data);\n// }\n// const removePostAPI = (data) => {\n//     return axios.delete('/api/post/${data.postId}/comment', data);\n// }\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    // redux-saga 는 여러 액션을 dispatch 할 수 있다.\n    const id = shortid.generate();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      //더미 data :data!\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    const id = shortid.generate(); // const result = yield call(removePostAPI, action.data);\n\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      //더미 data :data!\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/post.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","action","id","generate","type","data","content","err","error","response","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n// const addPostAPI = (data) => {\r\n//     return axios.post('/api/post', data);\r\n// }\r\n// const addCommentAPI = (data) => {\r\n//     return axios.post('/api/post/${data.postId}/comment', data);\r\n// }\r\n// const removePostAPI = (data) => {\r\n//     return axios.delete('/api/post/${data.postId}/comment', data);\r\n// }\r\n\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        // redux-saga 는 여러 액션을 dispatch 할 수 있다.\r\n        const id = shortid.generate();\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            //더미 data :data!\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const id = shortid.generate();\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            //더미 data :data!\r\n            data: action.data,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}