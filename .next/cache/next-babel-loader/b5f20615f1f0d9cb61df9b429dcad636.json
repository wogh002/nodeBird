{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../reducers/user'; // 제너레이터 아님 주의(X)\n// const logInAPI = (data) => {\n//     return axios.post('/api/login', data);\n// };\n// const logOutAPI = () => {\n//     return axios.post('/api/logout');\n// }\n//const signUpAPI = ()=>{\n//return axios.post('/api/signUp');\n//}\n\nfunction* logIn(action) {\n  //login요청 실패염려 때문에 try{} catch();\n  try {\n    // const result = yield call(loginAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n} //비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchunFollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchunFollow)]);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","logIn","action","type","data","err","error","response","logOut","signUp","follow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchunFollow","unFollow","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE,\r\n} from '../reducers/user';\r\n\r\n// 제너레이터 아님 주의(X)\r\n// const logInAPI = (data) => {\r\n//     return axios.post('/api/login', data);\r\n// };\r\n// const logOutAPI = () => {\r\n//     return axios.post('/api/logout');\r\n// }\r\n//const signUpAPI = ()=>{\r\n//return axios.post('/api/signUp');\r\n//}\r\nfunction* logIn(action) {\r\n    //login요청 실패염려 때문에 try{} catch();\r\n    try {\r\n        // const result = yield call(loginAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        // const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n            data: action.data,\r\n            // data: result.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n//비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n\r\n}\r\nfunction* watchunFollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST,unFollow);\r\n\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n        fork(watchFollow),\r\n        fork(watchunFollow),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}