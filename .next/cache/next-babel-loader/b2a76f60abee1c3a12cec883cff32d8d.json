{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//노예이름\n//게시글 작성\nconst ADD_POST = \"ADD_POST\"; //노예 생성함수\n\nexport const addPost = () => ({\n  type: ADD_POST\n});\nexport const initalState = {\n  //더미데이터를 만들자 \n  // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\n  //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\n  //User,Images,Comments 는 왜 대문자냐?\n  //DB 시퀄라이즈랑 관계가 있음 \n  //id content 는 게시글 자체의 속성이다.\n  //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\n  mainPosts: [{\n    id: 1,\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    User: {\n      //게시글 작성자의 정보 -> id ,닉네임 \n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [{\n      src: 'hello'\n    }, {\n      src: 'heeeeee'\n    }, {\n      src: 'hhhhhhhhhhhhh'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른  !!!! 사고싶어요~!'\n    }]\n  }],\n  //이미지 업로드하면 경로 쌓임 imagePaths 에 \n  imagePaths: [],\n  postAdded: false\n};\nconst dummyPost = {\n  id: 2,\n  content: '제로초'\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [dummyPost, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/post.js"],"names":["ADD_POST","addPost","type","initalState","mainPosts","id","content","User","nickname","Images","src","Comments","imagePaths","postAdded","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA;AACA;AACA,MAAMA,QAAQ,GAAG,UAAjB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAhB;AAEP,OAAO,MAAMG,WAAW,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,CAAC;AACRC,IAAAA,EAAE,EAAE,CADI;AAERC,IAAAA,OAAO,EAAE,uBAFD;AAGRC,IAAAA,IAAI,EAAE;AACF;AACAF,MAAAA,EAAE,EAAE,CAFF;AAGFG,MAAAA,QAAQ,EAAE;AAHR,KAHE;AAQRC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CARA;AAmBRC,IAAAA,QAAQ,EAAE,CACN;AACIJ,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIF,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIC,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIF,MAAAA,OAAO,EAAE;AAJb,KAPM;AAnBF,GAAD,CARY;AA0CvB;AACAM,EAAAA,UAAU,EAAE,EA3CW;AA4CvBC,EAAAA,SAAS,EAAE;AA5CY,CAApB;AA8CP,MAAMC,SAAS,GAAG;AACdT,EAAAA,EAAE,EAAE,CADU;AAEdC,EAAAA,OAAO,EAAE;AAFK,CAAlB;;AAIA,MAAMS,OAAO,GAAG,CAACC,KAAK,GAAGb,WAAT,EAAsBc,MAAtB,KAAiC;AAC7C,UAAQA,MAAM,CAACf,IAAf;AACI,SAAKF,QAAL;AAAe;AACX,+CACOgB,KADP;AAEIZ,UAAAA,SAAS,EAAE,CAACU,SAAD,EAAY,GAAGE,KAAK,CAACZ,SAArB,CAFf;AAGIS,UAAAA,SAAS,EAAE;AAHf;AAKH;;AACD;AAAS,aAAOG,KAAP;AARb;AAUH,CAXD;;AAYA,eAAeD,OAAf","sourcesContent":["//노예이름\r\n//게시글 작성\r\nconst ADD_POST = \"ADD_POST\";\r\n\r\n//노예 생성함수\r\nexport const addPost = () => ({ type: ADD_POST });\r\n\r\nexport const initalState = {\r\n    //더미데이터를 만들자 \r\n    // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\r\n    //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\r\n    //User,Images,Comments 는 왜 대문자냐?\r\n    //DB 시퀄라이즈랑 관계가 있음 \r\n    //id content 는 게시글 자체의 속성이다.\r\n    //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\r\n    mainPosts: [{\r\n        id: 1,\r\n        content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n        User: {\r\n            //게시글 작성자의 정보 -> id ,닉네임 \r\n            id: 1,\r\n            nickname: '제로초',\r\n        },\r\n        Images: [\r\n            {\r\n                src: 'hello',\r\n            },\r\n            {\r\n                src: 'heeeeee',\r\n            },\r\n            {\r\n                src: 'hhhhhhhhhhhhh',\r\n            }\r\n        ],\r\n        Comments: [\r\n            {\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '우와 개정판이 나왔군요~',\r\n            },\r\n            {\r\n                User: {\r\n                    nickname: 'hero',\r\n                },\r\n                content: '얼른  !!!! 사고싶어요~!',\r\n            }\r\n        ]\r\n    }],\r\n    //이미지 업로드하면 경로 쌓임 imagePaths 에 \r\n    imagePaths: [],\r\n    postAdded: false,\r\n}\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '제로초'\r\n}\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                postAdded: true,\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}