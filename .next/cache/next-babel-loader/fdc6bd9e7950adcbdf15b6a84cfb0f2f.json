{"ast":null,"code":"import { HYDRATE } from \"next-redux-wrapper\";\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from \"redux\"; //HYDRATE는 next-redux-wrapper를 쓸 때 필요한 액션인데요. \n//HYDRATE는\n// 리엑트에서 서버사이드 렌더링을 실행한 HTML 결과물을 받아온 뒤, \n//브라우저에서 이것을 다시 리액트 트리에 맞게 파싱하는 행위이다.\n//불변객체 -> 객체를 참조해서 수정 하면 안된다. -->교체 가능 read만 가능.\n//reducer는 (이전상태,액션)=>return 다음상태로 교체\n//다른 컴포넌트에서 getServerSideProps 해준 정보 HYDRATE에 있다.\n// const rootReducer = combineReducers({\n//     index: (state = {}, action) => {\n//         switch (action.type) {\n//             case HYDRATE:\n//                 console.log('HYDRATE', action);\n//                 return { ...state, ...action.payload }\n//             default: return state;\n//         }\n//     },\n//     user,\n//     post\n// });\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    default:\n      {\n        var combinedReducer = combineReducers({\n          user: user,\n          post: post\n        });\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","state","action","type","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AAEI;AAAS;AACL,YAAMC,eAAe,GAAGL,eAAe,CAAC;AACpCF,UAAAA,IAAI,EAAJA,IADoC;AAEpCC,UAAAA,IAAI,EAAJA;AAFoC,SAAD,CAAvC;AAIH;AAPL;AASH,CAVD;;AAWA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from './user';\r\nimport post from './post';\r\nimport { combineReducers } from \"redux\";\r\n//HYDRATE는 next-redux-wrapper를 쓸 때 필요한 액션인데요. \r\n//HYDRATE는\r\n// 리엑트에서 서버사이드 렌더링을 실행한 HTML 결과물을 받아온 뒤, \r\n//브라우저에서 이것을 다시 리액트 트리에 맞게 파싱하는 행위이다.\r\n\r\n//불변객체 -> 객체를 참조해서 수정 하면 안된다. -->교체 가능 read만 가능.\r\n//reducer는 (이전상태,액션)=>return 다음상태로 교체\r\n\r\n//다른 컴포넌트에서 getServerSideProps 해준 정보 HYDRATE에 있다.\r\n// const rootReducer = combineReducers({\r\n//     index: (state = {}, action) => {\r\n//         switch (action.type) {\r\n//             case HYDRATE:\r\n//                 console.log('HYDRATE', action);\r\n//                 return { ...state, ...action.payload }\r\n//             default: return state;\r\n//         }\r\n//     },\r\n//     user,\r\n//     post\r\n// });\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n\r\n        default: {\r\n            const combinedReducer = combineReducers({\r\n                user,\r\n                post,\r\n            })\r\n        }\r\n    }\r\n}\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}