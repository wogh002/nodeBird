{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension'; //composeWithDevTools 개발자 도구에서 보이게\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\n//Next.js는 유저가 요청할때마다 redux store를 새로 생성한다.\n\nconst configureStore = () => {\n  const middlewares = [];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) //배포용 \n  : composeWithDevTools(applyMiddleware([])); //개발용\n\n  const store = createStore(rootReducer, enhancer);\n  return store;\n}; //createWrapper => next의 라이프사이클에 redux를 결합 시키는 역할\n\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","rootReducer","composeWithDevTools","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;AAEA;AACA;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,EAApB;AAEA,QAAMC,QAAQ,GAAG,QACXL,OAAO,CAACD,eAAe,CAAC,GAAGK,WAAJ,CAAhB,CADI,CAC8B;AAD9B,IAEXF,mBAAmB,CAACH,eAAe,CAAC,EAAD,CAAhB,CAFzB,CAHyB,CAKsB;;AAC/C,QAAMO,KAAK,GAAGR,WAAW,CAACG,WAAD,EAAcI,QAAd,CAAzB;AACA,SAAOC,KAAP;AACH,CARD,C,CAUA;;;AACA,MAAMC,OAAO,GAAGV,aAAa,CAACM,cAAD,EAAiB;AAC1CK,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n//composeWithDevTools 개발자 도구에서 보이게\r\n\r\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\r\n//Next.js는 유저가 요청할때마다 redux store를 새로 생성한다.\r\n\r\nconst configureStore = () => {\r\n    const middlewares = [];\r\n\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares)) //배포용 \r\n        : composeWithDevTools(applyMiddleware([])) //개발용\r\n    const store = createStore(rootReducer, enhancer);\r\n    return store;\r\n}\r\n\r\n//createWrapper => next의 라이프사이클에 redux를 결합 시키는 역할\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}