{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    //게시글 ID\n    content: data.content,\n    //게시글 내용\n    User: {\n      //게시글 작성한 유저 정보 (id,닉네임)\n      id: 1,\n      nickname: '더미포스트에 있는 닉네임 제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    //댓글 ID\n    content: data,\n    User: {\n      //댓글 쓴 유저 정보\n      id: 1,\n      nickname: '재호쨩'\n    }\n  };\n}; //노예이름.\n\n\nexport var LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport var LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport var LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; //노예 생성함수\n//동적으로 생성하는건 재사용가능성이 높은것들.\n\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nexport var initalState = {\n  //더미데이터를 만들자 \n  // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\n  //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\n  //User,Images,Comments 는 왜 대문자냐?\n  //DB 시퀄라이즈랑 관계가 있음 \n  //id content 는 게시글 자체의 속성이다.\n  //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\n  mainPosts: [{\n    //게시글 id\n    id: 1,\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    User: {\n      //게시글(post) 작성자한 유저 정보 -> id ,닉네임 \n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }, {\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }, {\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      content: '우와 개정판이 나왔군요~',\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      }\n    }, {\n      id: shortId.generate(),\n      content: '이거 참 신기한 댓글이군요',\n      User: {\n        id: shortId.generate(),\n        nickname: 'hoya'\n      }\n    }]\n  }],\n  //이미지 업로드하면 경로 쌓임 imagePaths 에 \n  imagePaths: [],\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  hasMorePost: true //무한 스크롤 할건데 false 면 더 이상 안가져오기.\n\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        id: shortId.generate(),\n        content: faker.lorem.sentence(),\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        }\n      }]\n    };\n  });\n};\ninitalState.mainPosts = initalState.mainPosts.concat(generateDummyPost(10));\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loadPostLoading: true,\n          loadPostDone: false,\n          loadPostError: null\n        });\n      }\n\n    case LOAD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        loadPostLoading: false,\n        loadPostDone: true,\n        hasMorePost: hasMorePost\n      });\n\n    case LOAD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadPostLoading: false,\n        loadPostError: action.error\n      });\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 클라->서버 요청하고 응답의 값\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n      }\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //action.data에는 현재 삭제버튼 누른 게시글 id 들어있음\n        mainPosts: state.mainPosts.filter(function (item) {\n          return item.id !== action.data;\n        }),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      //현재 action.data => 게시글 id, 유저 id , 댓글 내용 있음\n      //불변성을 지켜줘야한다 ...\n      //불변성의 핵심 은 ★\n      // 바뀌는 것만 새로운 객체로 교체한다. 나머지는 참조를 유지한다.\n      //게시글은 새로 쓸때마다 새로 객체 추가가된다 -> mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //목표 : 게시글에 있는 댓글에 댓글 내용을 추가해야한다.\n      //1.댓글 객체에 접근하려면 게시글을 먼저 찾고 접근해야한다 (게시글 id를 통해서 찾을거임)\n      //index 는 0번지부터시작. -> 내가 1번게시글에 작성했다치면 , 인덱스는 0 \n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      }); //2.해당 게시글 get\n\n      var post = _objectSpread({}, state.mainPosts[postIndex]); //3.해당 게시글에 댓글내용 추가\n\n\n      post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments)); //4.전체 게시글 구해오기\n\n      var mainPosts = _toConsumableArray(state.mainPosts); //5.전체 게시글에 get한 해당 게시글 추가\n\n\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //6.추가\n        mainPosts: mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/post.js"],"names":["shortId","produce","faker","dummyPost","data","id","content","User","nickname","Images","Comments","dummyComment","generate","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequestAction","type","addCommentRequestAction","initalState","mainPosts","src","imagePaths","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","hasMorePost","generateDummyPost","number","Array","fill","map","name","findName","lorem","paragraph","image","sentence","concat","reducer","state","action","error","filter","item","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id, //게시글 ID\r\n    content: data.content, //게시글 내용\r\n    User: { //게시글 작성한 유저 정보 (id,닉네임)\r\n        id: 1,\r\n        nickname: '더미포스트에 있는 닉네임 제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n})\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(), //댓글 ID\r\n    content: data,\r\n    User: { //댓글 쓴 유저 정보\r\n        id: 1,\r\n        nickname: '재호쨩',\r\n    },\r\n});\r\n\r\n//노예이름.\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\n//노예 생성함수\r\n//동적으로 생성하는건 재사용가능성이 높은것들.\r\nexport const addPostRequestAction = (data) => ({ type: ADD_POST_REQUEST, data });\r\nexport const addCommentRequestAction = (data) => ({ type: ADD_COMMENT_REQUEST, data });\r\n\r\nexport const initalState = {\r\n    //더미데이터를 만들자 \r\n    // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\r\n    //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\r\n    //User,Images,Comments 는 왜 대문자냐?\r\n    //DB 시퀄라이즈랑 관계가 있음 \r\n    //id content 는 게시글 자체의 속성이다.\r\n    //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\r\n    mainPosts: [{\r\n        //게시글 id\r\n        id: 1,\r\n        content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n        User: {\r\n            //게시글(post) 작성자한 유저 정보 -> id ,닉네임 \r\n            id: 1,\r\n            nickname: '제로초',\r\n        },\r\n        Images: [\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            }\r\n        ],\r\n        Comments: [\r\n            {\r\n                id: shortId.generate(),\r\n                content: '우와 개정판이 나왔군요~',\r\n                User: {\r\n                    id: shortId.generate(),\r\n                    nickname: 'nero',\r\n                },\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                content: '이거 참 신기한 댓글이군요',\r\n                User: {\r\n                    id: shortId.generate(),\r\n                    nickname: 'hoya',\r\n                },\r\n\r\n            },\r\n        ]\r\n    }],\r\n    //이미지 업로드하면 경로 쌓임 imagePaths 에 \r\n    imagePaths: [],\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    hasMorePost : true, //무한 스크롤 할건데 false 면 더 이상 안가져오기.\r\n}\r\nexport const generateDummyPost = (number) => {\r\n    return Array(number).fill().map(() => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            content: faker.lorem.sentence(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: faker.name.findName(),\r\n            },\r\n        }],\r\n    }))\r\n}\r\ninitalState.mainPosts = initalState.mainPosts.concat(generateDummyPost(10));\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n\r\n        case LOAD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                loadPostLoading: true,\r\n                loadPostDone: false,\r\n                loadPostError: null,\r\n            }\r\n        }\r\n        case LOAD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                loadPostLoading: false,\r\n                loadPostDone: true,\r\n                hasMorePost \r\n            }\r\n        case LOAD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                loadPostLoading: false,\r\n                loadPostError: action.error\r\n            }\r\n\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 클라->서버 요청하고 응답의 값\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            }\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error\r\n            }\r\n        case REMOVE_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                removePostLoading: true,\r\n                removePostDone: false,\r\n                removePostError: null,\r\n            }\r\n        }\r\n        case REMOVE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //action.data에는 현재 삭제버튼 누른 게시글 id 들어있음\r\n                mainPosts: state.mainPosts.filter(item => item.id !== action.data),\r\n                removePostLoading: false,\r\n                removePostDone: true,\r\n            }\r\n        case REMOVE_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                removePostLoading: false,\r\n                removePostError: action.error\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            //현재 action.data => 게시글 id, 유저 id , 댓글 내용 있음\r\n            //불변성을 지켜줘야한다 ...\r\n            //불변성의 핵심 은 ★\r\n            // 바뀌는 것만 새로운 객체로 교체한다. 나머지는 참조를 유지한다.\r\n            //게시글은 새로 쓸때마다 새로 객체 추가가된다 -> mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n\r\n            //목표 : 게시글에 있는 댓글에 댓글 내용을 추가해야한다.\r\n            //1.댓글 객체에 접근하려면 게시글을 먼저 찾고 접근해야한다 (게시글 id를 통해서 찾을거임)\r\n            //index 는 0번지부터시작. -> 내가 1번게시글에 작성했다치면 , 인덱스는 0 \r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            //2.해당 게시글 get\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            //3.해당 게시글에 댓글내용 추가\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            //4.전체 게시글 구해오기\r\n            const mainPosts = [...state.mainPosts];\r\n            //5.전체 게시글에 get한 해당 게시글 추가\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                //6.추가\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error\r\n            }\r\n        default: return state;\r\n    }\r\n\r\n\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}