{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension'; //composeWithDevTools 개발자 도구에서 보이게\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\n// next-redux-wrapper는 유저가 페이지를 요청할때마다 리덕스 스토어를 생성해야 하기 때문에 configureStore함수를 정의해서 넘기는것이다.\n\nconst configureStore = () => {\n  //dispatch() 후 사가 or 썽크 호출됌\n  const middlewares = []; //사가 or 썽크 넣자 \n  //리덕스의 기능이 확장 된게 enhancer\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) //배포용 \n  : composeWithDevTools(applyMiddleware(...middlewares)); //개발용\n\n  const store = createStore(rootReducer, enhancer);\n  return store;\n}; //createWrapper => next에 redux 추가.\n\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/store/configureStore.js"],"names":["createWrapper","createStore","applyMiddleware","compose","rootReducer","composeWithDevTools","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACA,QAAMC,WAAW,GAAG,EAApB,CAFyB,CAED;AACxB;;AACA,QAAMC,QAAQ,GAAG,QACXL,OAAO,CAACD,eAAe,CAAC,GAAGK,WAAJ,CAAhB,CADI,CAC8B;AAD9B,IAEXF,mBAAmB,CAACH,eAAe,CAAC,GAAGK,WAAJ,CAAhB,CAFzB,CAJyB,CAMkC;;AAC3D,QAAME,KAAK,GAAGR,WAAW,CAACG,WAAD,EAAcI,QAAd,CAAzB;AACA,SAAOC,KAAP;AACH,CATD,C,CAWA;;;AACA,MAAMC,OAAO,GAAGV,aAAa,CAACM,cAAD,EAAiB;AAC1CK,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n//composeWithDevTools 개발자 도구에서 보이게\r\n//react에 redux를 붙이는건 react app에서는 단 하나의 redux store만 존재하므로 어렵지 않다.\r\n// next-redux-wrapper는 유저가 페이지를 요청할때마다 리덕스 스토어를 생성해야 하기 때문에 configureStore함수를 정의해서 넘기는것이다.\r\nconst configureStore = () => {\r\n    //dispatch() 후 사가 or 썽크 호출됌\r\n    const middlewares = []; //사가 or 썽크 넣자 \r\n    //리덕스의 기능이 확장 된게 enhancer\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares)) //배포용 \r\n        : composeWithDevTools(applyMiddleware(...middlewares)) //개발용\r\n    const store = createStore(rootReducer, enhancer);\r\n    return store;\r\n}\r\n\r\n//createWrapper => next에 redux 추가.\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}