{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \nconst dummyUser = data => _objectSpread(_objectSpread({}, data), {}, {\n  nickname: '젤호초',\n  id: 1,\n  Posts: [],\n  Followings: [],\n  Followers: []\n}); //노예이름\n\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\"; //노예 생성함수\n//동적으로 해도되고 안해도됌 -나의 선택-\n\nexport const loginRequestAction = data => ({\n  type: LOG_IN_REQUEST,\n  data\n});\nexport const logoutRequestAction = () => ({\n  type: LOG_OUT_REQUEST\n}); //초기 상태\n\nexport const initalState = {\n  logInLoading: false,\n  //로그인 시도중\n  logInDone: false,\n  //로그인 성공,실패\n  logInError: null,\n  logOutLoading: false,\n  //로그아웃 시도중\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  //회원가입 시도중\n  signUpDone: false,\n  signUpError: null,\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true,\n        logInDone: false,\n        logInError: null\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInDone: true,\n        me: dummyUser(action.data)\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInError: action.error\n      });\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: true,\n        logOutDone: false,\n        logOutError: null\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutDone: true,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutError: action.error\n      });\n\n    case SIGN_UP_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: true,\n        signUpDone: false,\n        signUpError: null\n      });\n\n    case SIGN_UP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 추가해야됌\n        me: dummyUser(action.data),\n        signUpLoading: false,\n        signUpDone: true\n      });\n\n    case SIGN_UP_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: false,\n        signUpError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/user.js"],"names":["dummyUser","data","nickname","id","Posts","Followings","Followers","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","loginRequestAction","type","logoutRequestAction","initalState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","me","signUpData","loginData","reducer","state","action","error"],"mappings":";;;;;;AAAA;AACA,MAAMA,SAAS,GAAIC,IAAD,oCAGXA,IAHW;AAIdC,EAAAA,QAAQ,EAAE,KAJI;AAKdC,EAAAA,EAAE,EAAE,CALU;AAMdC,EAAAA,KAAK,EAAE,EANO;AAOdC,EAAAA,UAAU,EAAE,EAPE;AAQdC,EAAAA,SAAS,EAAE;AARG,EAAlB,C,CAWA;;;AACA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAIrB,IAAD,KAAW;AAAEsB,EAAAA,IAAI,EAAEhB,cAAR;AAAwBN,EAAAA;AAAxB,CAAX,CAA3B;AACP,OAAO,MAAMuB,mBAAmB,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEb;AAAR,CAAP,CAA5B,C,CACP;;AACA,OAAO,MAAMe,WAAW,GAAG;AACvBC,EAAAA,YAAY,EAAE,KADS;AACF;AACrBC,EAAAA,SAAS,EAAE,KAFY;AAEL;AAClBC,EAAAA,UAAU,EAAE,IAHW;AAIvBC,EAAAA,aAAa,EAAE,KAJQ;AAID;AACtBC,EAAAA,UAAU,EAAE,KALW;AAMvBC,EAAAA,WAAW,EAAE,IANU;AAOvBC,EAAAA,aAAa,EAAE,KAPQ;AAOD;AACtBC,EAAAA,UAAU,EAAE,KARW;AASvBC,EAAAA,WAAW,EAAE,IATU;AAUvBC,EAAAA,EAAE,EAAE,IAVmB;AAWvBC,EAAAA,UAAU,EAAE,EAXW;AAYvBC,EAAAA,SAAS,EAAE;AAZY,CAApB;;AAeP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGd,WAAT,EAAsBe,MAAtB,KAAiC;AAC7C,UAAQA,MAAM,CAACjB,IAAf;AACI,SAAKhB,cAAL;AACI,6CACOgC,KADP;AAEIb,QAAAA,YAAY,EAAE,IAFlB;AAGIC,QAAAA,SAAS,EAAE,KAHf;AAIIC,QAAAA,UAAU,EAAE;AAJhB;;AAMJ,SAAKpB,cAAL;AACI,6CACO+B,KADP;AAEIb,QAAAA,YAAY,EAAE,KAFlB;AAGIC,QAAAA,SAAS,EAAE,IAHf;AAIIQ,QAAAA,EAAE,EAAEnC,SAAS,CAACwC,MAAM,CAACvC,IAAR;AAJjB;;AAMJ,SAAKQ,cAAL;AACI,6CACO8B,KADP;AAEIb,QAAAA,YAAY,EAAE,KAFlB;AAGIE,QAAAA,UAAU,EAAEY,MAAM,CAACC;AAHvB;;AAKJ,SAAK/B,eAAL;AACI,6CACO6B,KADP;AAEIV,QAAAA,aAAa,EAAE,IAFnB;AAGIC,QAAAA,UAAU,EAAE,KAHhB;AAIIC,QAAAA,WAAW,EAAE;AAJjB;;AAMJ,SAAKpB,eAAL;AACI,6CACO4B,KADP;AAEIV,QAAAA,aAAa,EAAE,KAFnB;AAGIC,QAAAA,UAAU,EAAE,IAHhB;AAIIK,QAAAA,EAAE,EAAE;AAJR;;AAMJ,SAAKvB,eAAL;AACI,6CACO2B,KADP;AAEIV,QAAAA,aAAa,EAAE,KAFnB;AAGIE,QAAAA,WAAW,EAAES,MAAM,CAACC;AAHxB;;AAKJ,SAAK5B,eAAL;AACI,6CACO0B,KADP;AAEIP,QAAAA,aAAa,EAAE,IAFnB;AAGIC,QAAAA,UAAU,EAAE,KAHhB;AAIIC,QAAAA,WAAW,EAAE;AAJjB;;AAMJ,SAAKpB,eAAL;AACI,6CACOyB,KADP;AAEI;AACAJ,QAAAA,EAAE,EAAEnC,SAAS,CAACwC,MAAM,CAACvC,IAAR,CAHjB;AAII+B,QAAAA,aAAa,EAAE,KAJnB;AAKIC,QAAAA,UAAU,EAAE;AALhB;;AAOJ,SAAKlB,eAAL;AACI,6CACOwB,KADP;AAEIP,QAAAA,aAAa,EAAE,KAFnB;AAGIE,QAAAA,WAAW,EAAEM,MAAM,CAACC;AAHxB;;AAKJ;AAAS,aAAOF,KAAP;AA9Db;AAgEH,CAjED;;AAkEA,eAAeD,OAAf","sourcesContent":["//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \r\nconst dummyUser = (data) => ({\r\n    //사용유저 한명에 대한 정보들! 받아옴!\r\n    //...data 에는 email,password 있음\r\n    ...data,\r\n    nickname: '젤호초',\r\n    id: 1,\r\n    Posts: [],\r\n    Followings: [],\r\n    Followers: [],\r\n});\r\n\r\n//노예이름\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\r\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\r\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\r\n\r\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\r\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\r\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\r\n\r\n//노예 생성함수\r\n//동적으로 해도되고 안해도됌 -나의 선택-\r\nexport const loginRequestAction = (data) => ({ type: LOG_IN_REQUEST, data });\r\nexport const logoutRequestAction = () => ({ type: LOG_OUT_REQUEST });\r\n//초기 상태\r\nexport const initalState = {\r\n    logInLoading: false, //로그인 시도중\r\n    logInDone: false, //로그인 성공,실패\r\n    logInError: null,\r\n    logOutLoading: false, //로그아웃 시도중\r\n    logOutDone: false,\r\n    logOutError: null,\r\n    signUpLoading: false, //회원가입 시도중\r\n    signUpDone: false,\r\n    signUpError: null,\r\n    me: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n}\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST:\r\n            return {\r\n                ...state,\r\n                logInLoading: true,\r\n                logInDone: false,\r\n                logInError: null,\r\n            }\r\n        case LOG_IN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInDone: true,\r\n                me: dummyUser(action.data),\r\n            }\r\n        case LOG_IN_FAILURE:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInError: action.error,\r\n            }\r\n        case LOG_OUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                logOutLoading: true,\r\n                logOutDone: false,\r\n                logOutError: null,\r\n            }\r\n        case LOG_OUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutDone: true,\r\n                me: null,\r\n            }\r\n        case LOG_OUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutError: action.error,\r\n            }\r\n        case SIGN_UP_REQUEST:\r\n            return {\r\n                ...state,\r\n                signUpLoading: true,\r\n                signUpDone: false,\r\n                signUpError: null,\r\n            }\r\n        case SIGN_UP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 추가해야됌\r\n                me: dummyUser(action.data),\r\n                signUpLoading: false,\r\n                signUpDone: true,\r\n            }\r\n        case SIGN_UP_FAILURE:\r\n            return {\r\n                ...state,\r\n                signUpLoading: false,\r\n                signUpError: action.error,\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}