{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \nconst dummyUser = data => _objectSpread(_objectSpread({}, data), {}, {\n  //...data 에 email,password 있음\n  nickname: '태호찡',\n  id: 1,\n  //사용자 ID\n  Posts: [{\n    id: 1\n  }],\n  //내가 작성한 게시글 \n  Followings: [{\n    nickname: \"재호찡\"\n  }, {\n    nickname: \"상원찡\"\n  }, {\n    nickname: \"제로초\"\n  }],\n  Followers: [{\n    nickname: \"상원찡\"\n  }, {\n    nickname: \"재호찡\"\n  }]\n}); //노예이름\n\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport const CHANGE_NICKNAME_REQUEST = \"CHANGE_NICKNAME_REQUEST\";\nexport const CHANGE_NICKNAME_SUCCESS = \"CHANGE_NICKNAME_SUCCESS\";\nexport const CHANGE_NICKNAME_FAILURE = \"CHANGE_NICKNAME_FAILURE\";\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\"; //post 에서 add POST 했을 때 user me 의 Posts(내가 작성한 게시글)에 추가해줘야한다.\n\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\nexport const REMOVE_POST_OF_ME = \"REMOVE_POST_OF_ME\"; //노예 생성함수\n//재사용 할 거면 동적으로 생성하자.\n\nexport const loginRequestAction = data => ({\n  type: LOG_IN_REQUEST,\n  data\n});\nexport const logoutRequestAction = () => ({\n  type: LOG_OUT_REQUEST\n}); //초기 상태\n\nexport const initalState = {\n  logInLoading: false,\n  //로그인 시도중\n  logInDone: false,\n  //로그인 성공,실패\n  logInError: null,\n  logOutLoading: false,\n  //로그아웃 시도중\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  //회원가입 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  changeNicknameError: null,\n  me: null,\n  signUpData: {},\n  loginData: {},\n  followLoading: false,\n  followDone: false,\n  followError: null,\n  unFollowLoading: false,\n  unFollowDone: false,\n  unFollowError: null\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true,\n        logInDone: false,\n        logInError: null\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInDone: true,\n        me: dummyUser(action.data)\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInError: action.error\n      });\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: true,\n        logOutDone: false,\n        logOutError: null\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutDone: true,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutError: action.error\n      });\n\n    case SIGN_UP_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: true,\n        signUpDone: false,\n        signUpError: null\n      });\n\n    case SIGN_UP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 추가해야됌\n        me: dummyUser(action.data),\n        signUpLoading: false,\n        signUpDone: true\n      });\n\n    case SIGN_UP_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: false,\n        signUpError: action.error\n      });\n\n    case CHANGE_NICKNAME_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: true,\n        changeNicknameDone: false,\n        changeNicknameError: null\n      });\n\n    case CHANGE_NICKNAME_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 추가해야됌\n        changeNicknameLoading: false,\n        changeNicknameDone: true\n      });\n\n    case CHANGE_NICKNAME_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: false,\n        changeNicknameError: action.error\n      });\n\n    case ADD_POST_TO_ME:\n      //게시글 id를 data로 받음\n      return _objectSpread(_objectSpread({}, state), {}, {\n        me: _objectSpread(_objectSpread({}, state.me), {}, {\n          Posts: [{\n            id: action.data\n          }, ...state.me.Posts]\n        })\n      });\n\n    case REMOVE_POST_OF_ME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        me: _objectSpread(_objectSpread({}, state.me), {}, {\n          Posts: state.me.Posts.filter(item => item.id !== action.data)\n        })\n      });\n\n    case FOLLOW_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        followLoading: true,\n        followDone: false,\n        followError: null\n      });\n\n    case FOLLOW_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        followLoading: false,\n        followDone: true,\n        me: _objectSpread(_objectSpread({}, state.me), {}, {\n          Followings: [{\n            id: action.data\n          }, ...state.me.Followings]\n        })\n      });\n\n    case FOLLOW_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        followLoading: false,\n        followError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/user.js"],"names":["dummyUser","data","nickname","id","Posts","Followings","Followers","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loginRequestAction","type","logoutRequestAction","initalState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpData","loginData","followLoading","followDone","followError","unFollowLoading","unFollowDone","unFollowError","reducer","state","action","error","filter","item"],"mappings":"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","sourcesContent":["//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \r\nconst dummyUser = (data) => ({\r\n    //사용유저 한명에 대한 정보들! 받아옴!\r\n    ...data, //...data 에 email,password 있음\r\n    nickname: '태호찡',\r\n    id: 1, //사용자 ID\r\n    Posts: [{ id: 1 }], //내가 작성한 게시글 \r\n    Followings: [{ nickname: \"재호찡\" }, { nickname: \"상원찡\" }, { nickname: \"제로초\" }],\r\n    Followers: [{ nickname: \"상원찡\" }, { nickname: \"재호찡\" }],\r\n});\r\n//노예이름\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const CHANGE_NICKNAME_REQUEST = \"CHANGE_NICKNAME_REQUEST\";\r\nexport const CHANGE_NICKNAME_SUCCESS = \"CHANGE_NICKNAME_SUCCESS\";\r\nexport const CHANGE_NICKNAME_FAILURE = \"CHANGE_NICKNAME_FAILURE\";\r\n\r\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\r\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\r\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\r\n\r\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\r\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\r\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\r\n\r\n//post 에서 add POST 했을 때 user me 의 Posts(내가 작성한 게시글)에 추가해줘야한다.\r\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\r\nexport const REMOVE_POST_OF_ME = \"REMOVE_POST_OF_ME\";\r\n\r\n//노예 생성함수\r\n//재사용 할 거면 동적으로 생성하자.\r\nexport const loginRequestAction = (data) => ({ type: LOG_IN_REQUEST, data });\r\nexport const logoutRequestAction = () => ({ type: LOG_OUT_REQUEST });\r\n\r\n//초기 상태\r\nexport const initalState = {\r\n    logInLoading: false, //로그인 시도중\r\n    logInDone: false, //로그인 성공,실패\r\n    logInError: null,\r\n    logOutLoading: false, //로그아웃 시도중\r\n    logOutDone: false,\r\n    logOutError: null,\r\n    signUpLoading: false, //회원가입 시도중\r\n    signUpDone: false,\r\n    signUpError: null,\r\n    changeNicknameLoading: false, //닉네임 변경 시도중\r\n    changeNicknameDone: false,\r\n    changeNicknameError: null,\r\n    me: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n\r\n    followLoading: false,\r\n    followDone: false,\r\n    followError: null,\r\n    unFollowLoading: false,\r\n    unFollowDone: false,\r\n    unFollowError: null,\r\n}\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST:\r\n            return {\r\n                ...state,\r\n                logInLoading: true,\r\n                logInDone: false,\r\n                logInError: null,\r\n            }\r\n        case LOG_IN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInDone: true,\r\n                me: dummyUser(action.data),\r\n            }\r\n        case LOG_IN_FAILURE:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInError: action.error,\r\n            }\r\n        case LOG_OUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                logOutLoading: true,\r\n                logOutDone: false,\r\n                logOutError: null,\r\n            }\r\n        case LOG_OUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutDone: true,\r\n                me: null,\r\n            }\r\n        case LOG_OUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutError: action.error,\r\n            }\r\n        case SIGN_UP_REQUEST:\r\n            return {\r\n                ...state,\r\n                signUpLoading: true,\r\n                signUpDone: false,\r\n                signUpError: null,\r\n            }\r\n        case SIGN_UP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 추가해야됌\r\n                me: dummyUser(action.data),\r\n                signUpLoading: false,\r\n                signUpDone: true,\r\n            }\r\n        case SIGN_UP_FAILURE:\r\n            return {\r\n                ...state,\r\n                signUpLoading: false,\r\n                signUpError: action.error,\r\n            }\r\n        case CHANGE_NICKNAME_REQUEST:\r\n            return {\r\n                ...state,\r\n                changeNicknameLoading: true,\r\n                changeNicknameDone: false,\r\n                changeNicknameError: null,\r\n            }\r\n        case CHANGE_NICKNAME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 추가해야됌\r\n                changeNicknameLoading: false,\r\n                changeNicknameDone: true,\r\n            }\r\n        case CHANGE_NICKNAME_FAILURE:\r\n            return {\r\n                ...state,\r\n                changeNicknameLoading: false,\r\n                changeNicknameError: action.error,\r\n            }\r\n        case ADD_POST_TO_ME:\r\n            //게시글 id를 data로 받음\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Posts: [{ id: action.data }, ...state.me.Posts],\r\n                },\r\n            }\r\n        case REMOVE_POST_OF_ME:\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Posts: state.me.Posts.filter(item => item.id !== action.data),\r\n                },\r\n            }\r\n        case FOLLOW_REQUEST:\r\n            return {\r\n                ...state,\r\n                followLoading: true,\r\n                followDone: false,\r\n                followError: null,\r\n            }\r\n        case FOLLOW_SUCCESS:\r\n            return {\r\n                ...state,\r\n                followLoading: false,\r\n                followDone: true,\r\n                me: {\r\n                    ...state.me,\r\n                    Followings: [{ id: action.data }, ...state.me.Followings]\r\n                }\r\n            }\r\n        case FOLLOW_FAILURE:\r\n            return {\r\n                ...state,\r\n                followLoading: false,\r\n                followError: action.error,\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}