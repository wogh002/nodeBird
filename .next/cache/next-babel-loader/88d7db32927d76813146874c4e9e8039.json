{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user, { initalState } from './user';\nimport post from './post';\nimport { combineReducers } from \"redux\"; //생각날때마다 추가하자 state\n\nconst initialState = {\n  user: {},\n  post: {}\n}; //불변객체 -> 객체를 참조해서 수정 하면안된다. -->교체 가능 read만 가능.\n//reducer는 (이전상태,액션)=>return 다음상태로 교체\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  }\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/index.js"],"names":["HYDRATE","user","initalState","post","combineReducers","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,IAAeC,WAAf,QAAkC,QAAlC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAGA;;AACA,MAAMC,YAAY,GAAG;AACjBJ,EAAAA,IAAI,EAAE,EADW;AAIjBE,EAAAA,IAAI,EAAE;AAJW,CAArB,C,CASA;AACA;;AACA,MAAMG,WAAW,GAAGF,eAAe,CAAC;AAChCG,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKV,OAAL;AACIW,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACJ;AAAS,eAAOL,KAAP;AAJb;AAMH;AAR+B,CAAD,CAAnC;AAUA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport user, { initalState } from './user';\r\nimport post from './post';\r\nimport { combineReducers } from \"redux\";\r\n\r\n\r\n//생각날때마다 추가하자 state\r\nconst initialState = {\r\n    user: {\r\n\r\n    },\r\n    post: {\r\n\r\n    }\r\n}\r\n\r\n//불변객체 -> 객체를 참조해서 수정 하면안된다. -->교체 가능 read만 가능.\r\n//reducer는 (이전상태,액션)=>return 다음상태로 교체\r\nconst rootReducer = combineReducers({\r\n    index: (state = {}, action) => {\r\n        switch (action.type) {\r\n            case HYDRATE:\r\n                console.log('HYDRATE', action);\r\n                return { ...state, ...action.payload }\r\n            default: return state;\r\n        }\r\n    }\r\n});\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}