{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \nvar dummyUser = function dummyUser(data) {\n  return _objectSpread(_objectSpread({}, data), {}, {\n    //...data 에 email,password 있음\n    nickname: '태호찡',\n    id: data.id,\n    Posts: [{\n      id: 1\n    }],\n    //내가 작성한 게시글 \n    Followings: [{\n      nickname: \"재호찡\"\n    }, {\n      nickname: \"상원찡\"\n    }, {\n      nickname: \"제로초\"\n    }],\n    Followers: [{\n      nickname: \"상원찡\"\n    }, {\n      nickname: \"재호찡\"\n    }]\n  });\n}; //노예이름\n\n\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport var SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport var SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport var SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport var CHANGE_NICKNAME_REQUEST = \"CHANGE_NICKNAME_REQUEST\";\nexport var CHANGE_NICKNAME_SUCCESS = \"CHANGE_NICKNAME_SUCCESS\";\nexport var CHANGE_NICKNAME_FAILURE = \"CHANGE_NICKNAME_FAILURE\";\nexport var FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport var FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\nexport var FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\nexport var UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport var UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\nexport var UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\"; //post 에서 add POST 했을 때 user me 의 Posts(내가 작성한 게시글)에 추가해줘야한다.\n\nexport var ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\nexport var REMOVE_POST_OF_ME = \"REMOVE_POST_OF_ME\"; //노예 생성함수\n//재사용 할 거면 동적으로 생성하자.\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction() {\n  return {\n    type: LOG_OUT_REQUEST\n  };\n}; //초기 상태\n\nexport var initalState = {\n  logInLoading: false,\n  //로그인 시도중\n  logInDone: false,\n  //로그인 성공,실패\n  logInError: null,\n  logOutLoading: false,\n  //로그아웃 시도중\n  logOutDone: false,\n  logOutError: null,\n  signUpLoading: false,\n  //회원가입 시도중\n  signUpDone: false,\n  signUpError: null,\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  changeNicknameError: null,\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true,\n        logInDone: false,\n        logInError: null\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInDone: true,\n        me: dummyUser(action.data)\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInError: action.error\n      });\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: true,\n        logOutDone: false,\n        logOutError: null\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutDone: true,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logOutLoading: false,\n        logOutError: action.error\n      });\n\n    case SIGN_UP_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: true,\n        signUpDone: false,\n        signUpError: null\n      });\n\n    case SIGN_UP_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 추가해야됌\n        me: dummyUser(action.data),\n        signUpLoading: false,\n        signUpDone: true\n      });\n\n    case SIGN_UP_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        signUpLoading: false,\n        signUpError: action.error\n      });\n\n    case CHANGE_NICKNAME_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: true,\n        changeNicknameDone: false,\n        changeNicknameError: null\n      });\n\n    case CHANGE_NICKNAME_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 추가해야됌\n        changeNicknameLoading: false,\n        changeNicknameDone: true\n      });\n\n    case CHANGE_NICKNAME_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        changeNicknameLoading: false,\n        changeNicknameError: action.error\n      });\n\n    case ADD_POST_TO_ME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        me: _objectSpread(_objectSpread({}, state.me), {}, {\n          Posts: [{\n            id: action.data\n          }].concat(_toConsumableArray(state.me.Posts))\n        })\n      });\n\n    case REMOVE_POST_OF_ME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //내가 작성한 게시글 ID \n        Posts: state.me.Posts.filter(function (item) {\n          return item.id !== action.data;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/user.js"],"names":["dummyUser","data","nickname","id","Posts","Followings","Followers","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loginRequestAction","type","logoutRequestAction","initalState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutError","signUpLoading","signUpDone","signUpError","changeNicknameLoading","changeNicknameDone","changeNicknameError","me","signUpData","loginData","reducer","state","action","error","filter","item"],"mappings":"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","sourcesContent":["//더미데이터 함수 : 클라->서버 요청 하고 응답받은 결과 \r\nconst dummyUser = (data) => ({\r\n    //사용유저 한명에 대한 정보들! 받아옴!\r\n    ...data, //...data 에 email,password 있음\r\n    nickname: '태호찡',\r\n    id: data.id,\r\n    Posts: [{ id: 1 }], //내가 작성한 게시글 \r\n    Followings: [{ nickname: \"재호찡\" }, { nickname: \"상원찡\" }, { nickname: \"제로초\" }],\r\n    Followers: [{ nickname: \"상원찡\" }, { nickname: \"재호찡\" }],\r\n});\r\n//노예이름\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const CHANGE_NICKNAME_REQUEST = \"CHANGE_NICKNAME_REQUEST\";\r\nexport const CHANGE_NICKNAME_SUCCESS = \"CHANGE_NICKNAME_SUCCESS\";\r\nexport const CHANGE_NICKNAME_FAILURE = \"CHANGE_NICKNAME_FAILURE\";\r\n\r\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\r\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\r\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\r\n\r\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\r\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\r\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\r\n\r\n//post 에서 add POST 했을 때 user me 의 Posts(내가 작성한 게시글)에 추가해줘야한다.\r\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\r\nexport const REMOVE_POST_OF_ME = \"REMOVE_POST_OF_ME\";\r\n\r\n//노예 생성함수\r\n//재사용 할 거면 동적으로 생성하자.\r\nexport const loginRequestAction = (data) => ({ type: LOG_IN_REQUEST, data });\r\nexport const logoutRequestAction = () => ({ type: LOG_OUT_REQUEST });\r\n\r\n//초기 상태\r\nexport const initalState = {\r\n    logInLoading: false, //로그인 시도중\r\n    logInDone: false, //로그인 성공,실패\r\n    logInError: null,\r\n    logOutLoading: false, //로그아웃 시도중\r\n    logOutDone: false,\r\n    logOutError: null,\r\n    signUpLoading: false, //회원가입 시도중\r\n    signUpDone: false,\r\n    signUpError: null,\r\n    changeNicknameLoading: false, //닉네임 변경 시도중\r\n    changeNicknameDone: false,\r\n    changeNicknameError: null,\r\n    me: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n}\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST:\r\n            return {\r\n                ...state,\r\n                logInLoading: true,\r\n                logInDone: false,\r\n                logInError: null,\r\n            }\r\n        case LOG_IN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInDone: true,\r\n                me: dummyUser(action.data),\r\n            }\r\n        case LOG_IN_FAILURE:\r\n            return {\r\n                ...state,\r\n                logInLoading: false,\r\n                logInError: action.error,\r\n            }\r\n        case LOG_OUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                logOutLoading: true,\r\n                logOutDone: false,\r\n                logOutError: null,\r\n            }\r\n        case LOG_OUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutDone: true,\r\n                me: null,\r\n            }\r\n        case LOG_OUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                logOutLoading: false,\r\n                logOutError: action.error,\r\n            }\r\n        case SIGN_UP_REQUEST:\r\n            return {\r\n                ...state,\r\n                signUpLoading: true,\r\n                signUpDone: false,\r\n                signUpError: null,\r\n            }\r\n        case SIGN_UP_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 추가해야됌\r\n                me: dummyUser(action.data),\r\n                signUpLoading: false,\r\n                signUpDone: true,\r\n            }\r\n        case SIGN_UP_FAILURE:\r\n            return {\r\n                ...state,\r\n                signUpLoading: false,\r\n                signUpError: action.error,\r\n            }\r\n        case CHANGE_NICKNAME_REQUEST:\r\n            return {\r\n                ...state,\r\n                changeNicknameLoading: true,\r\n                changeNicknameDone: false,\r\n                changeNicknameError: null,\r\n            }\r\n        case CHANGE_NICKNAME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 추가해야됌\r\n                changeNicknameLoading: false,\r\n                changeNicknameDone: true,\r\n            }\r\n        case CHANGE_NICKNAME_FAILURE:\r\n            return {\r\n                ...state,\r\n                changeNicknameLoading: false,\r\n                changeNicknameError: action.error,\r\n            }\r\n        case ADD_POST_TO_ME:\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Posts: [{ id: action.data }, ...state.me.Posts],\r\n                },\r\n            }\r\n        case REMOVE_POST_OF_ME:\r\n            return {\r\n                ...state,\r\n                //내가 작성한 게시글 ID \r\n                Posts: state.me.Posts.filter(item => item.id !== action.data),\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}