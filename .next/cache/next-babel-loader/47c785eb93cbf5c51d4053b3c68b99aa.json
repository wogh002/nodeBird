{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects'; // 제너레이터 아님 주의(X)\n// const logInAPI = (data) => {\n//     return axios.post('/api/login', data);\n// };\n// const logOutAPI = () => {\n//     return axios.post('/api/logout');\n// }\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          console.log('aaaa');\n          _context.next = 6;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: \"LOG_OUT_SUCCESS\"\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n} //비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork([watchLogIn]), fork([watchLogOut])]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","fork","put","takeLatest","delay","action","console","log","type","data","response"],"mappings":";;oDAQUA,K;qDAkBAC,M;qDAgBAC,U;qDAGAC,W;qDAGeC,Q;;AAhDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAUT,KAAV,CAAgBU,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQ,iBAAMD,KAAK,CAAC,IAAD,CAAX;;AAJR;AAKQE,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AALR;AAMQ,iBAAML,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAACJ,MAAM,CAACI;AAFN,WAAD,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYQ,iBAAMP,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUb,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMQ,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMF,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMN,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAE,aAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAeA;;;AACA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,gBAAD,EAAmBR,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,iBAAD,EAAoBP,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAAC,CAACJ,UAAD,CAAD,CADE,EAENI,IAAI,CAAC,CAACH,WAAD,CAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n// 제너레이터 아님 주의(X)\r\n// const logInAPI = (data) => {\r\n//     return axios.post('/api/login', data);\r\n// };\r\n// const logOutAPI = () => {\r\n//     return axios.post('/api/logout');\r\n// }\r\nfunction* logIn(action) {\r\n    //login요청 실패염려 때문에 try{} catch();\r\n    try {\r\n        // const result = yield call(loginAPI, action.data);\r\n        yield delay(1000);\r\n        console.log('aaaa');\r\n        yield put({\r\n            type: \"LOG_IN_SUCCESS\",\r\n            data:action.data\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"LOG_IN_FAILURE\",\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: \"LOG_OUT_SUCCESS\",\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"LOG_OUT_FAILURE\",\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n//비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork([watchLogIn]),\r\n        fork([watchLogOut]),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}