{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dlals\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\node-bird\\\\pages\\\\_app.jsx\",\n    _this = this;\n\n//페이지들의 공통적으로 사용되는 부분은 _app 에서 작성해서 적용시키자\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Head from \"next/head\";\nimport wrapper from '../store/configureStore'; //웹팩이란 여러개의 파일을 하나의 js파일로 합쳐준다.\n//next의 웹팩이 css를 보는 순간\n// css를 <style>태그로 바꿔서 html 에다가 넣어준다\n\nimport \"antd/dist/antd.css\"; //index의 부모는 app\n// index.js의 return 부분이 _App 의 Component로 간다\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        charSet: \"utf-8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"NodeBird@@\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = NodeBird;\nNodeBird.propTypes = {\n  //점검을 무조건 해주자 점검을하면 서비스의 안전성 ↑\n  //<Component />처럼 JSX로 쓸 수 있는 것들을 elementType이라고 합니다.\n  Component: PropTypes.elementType.isRequired\n}; //서버사이드 렌더링 해주겠다는 선언. 선언만 해준거임. 아직 CSR\n//이걸로 이제 개별페이지에 서버사이드 렌더링을 적용시켜줄거다.\n\nexport default _c2 = wrapper.withRedux(NodeBird);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NodeBird\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/pages/_app.jsx"],"names":["React","PropTypes","Head","wrapper","NodeBird","Component","propTypes","elementType","isRequired","withRedux"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB,C,CAEA;AACA;AACA;;AACA,OAAO,oBAAP,C,CAEA;AACA;;;;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAmB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAClC,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAM,QAAA,OAAO,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAKE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,aALF;AAAA,kBADF;AASD,CAVD;;KAAMD,Q;AAYNA,QAAQ,CAACE,SAAT,GAAqB;AACnB;AACA;AACAD,EAAAA,SAAS,EAAEJ,SAAS,CAACM,WAAV,CAAsBC;AAHd,CAArB,C,CAKA;AACA;;AACA,qBAAeL,OAAO,CAACM,SAAR,CAAkBL,QAAlB,CAAf","sourcesContent":["//페이지들의 공통적으로 사용되는 부분은 _app 에서 작성해서 적용시키자\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Head from \"next/head\";\r\nimport wrapper from '../store/configureStore';\r\n\r\n//웹팩이란 여러개의 파일을 하나의 js파일로 합쳐준다.\r\n//next의 웹팩이 css를 보는 순간\r\n// css를 <style>태그로 바꿔서 html 에다가 넣어준다\r\nimport \"antd/dist/antd.css\";\r\n\r\n//index의 부모는 app\r\n// index.js의 return 부분이 _App 의 Component로 간다\r\nconst NodeBird = ({ Component }) => {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>NodeBird@@</title>\r\n      </Head>\r\n      <Component />\r\n    </>\r\n  );\r\n};\r\n\r\nNodeBird.propTypes = {\r\n  //점검을 무조건 해주자 점검을하면 서비스의 안전성 ↑\r\n  //<Component />처럼 JSX로 쓸 수 있는 것들을 elementType이라고 합니다.\r\n  Component: PropTypes.elementType.isRequired,\r\n};\r\n//서버사이드 렌더링 해주겠다는 선언. 선언만 해준거임. 아직 CSR\r\n//이걸로 이제 개별페이지에 서버사이드 렌더링을 적용시켜줄거다.\r\nexport default wrapper.withRedux(NodeBird);\r\n"]},"metadata":{},"sourceType":"module"}