{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dlals\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\node-bird\\\\components\\\\postForm.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addPostRequestAction } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    console.log(state.post);\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var onSubmit = useCallback(function () {\n    dispatch(addPostRequestAction(text)); // setText('');\n    //왜 위에서 setText 지워주웠냐면 => 만약 서버쪽에서 에러발생했다고 가정한다면,\n    //사용자에게 에러발생하였습니다 잠시기다려주세요 하는데 게시글 다삭제되면 빡치니까.\n  }, [text]);\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    return imageInput.current.click();\n  }, [imageInput.current]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          \"float\": 'right'\n        },\n        htmlType: \"sumbit\",\n        children: \"\\uC9F9\\uC9F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imagePaths.map(function (v) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: v,\n            style: {\n              width: '200px'\n            },\n            alt: v\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC81C\\uAC70\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 33\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, _this)]\n        }, v, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(PostForm, \"u2PwjGYS/f4mLkh4zlp/5+IUWSU=\", false, function () {\n  return [useInput, useDispatch, useSelector];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/components/postForm.jsx"],"names":["React","useCallback","useEffect","useRef","useState","Form","Input","Button","useDispatch","useSelector","addPostRequestAction","useInput","PostForm","text","onChangeText","setText","dispatch","state","console","log","post","imagePaths","addPostDone","onSubmit","imageInput","onClickImageUpload","current","click","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addPostRequestAction } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nconst PostForm = () => {\r\n    const [text, onChangeText, setText] = useInput('');\r\n\r\n    const dispatch = useDispatch();\r\n    const { imagePaths, addPostDone } = useSelector(state => {\r\n        console.log(state.post);\r\n        return state.post\r\n    });\r\n\r\n    const onSubmit = useCallback(() => {\r\n        dispatch(addPostRequestAction(text));\r\n        // setText('');\r\n        //왜 위에서 setText 지워주웠냐면 => 만약 서버쪽에서 에러발생했다고 가정한다면,\r\n        //사용자에게 에러발생하였습니다 잠시기다려주세요 하는데 게시글 다삭제되면 빡치니까.\r\n    }, [text]);\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => imageInput.current.click(), [imageInput.current]);\r\n\r\n    return (\r\n        <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder=\"어떤 신기한 일이 있었나요\"\r\n            />\r\n            <div>\r\n                <input type=\"file\" multiple hidden ref={imageInput} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"sumbit\">\r\n                    짹짹\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                {\r\n                    imagePaths.map((v) => (\r\n                        <div key={v} style={{ display: 'inline-block' }}>\r\n                            <img src={v} style={{ width: '200px' }} alt={v} />\r\n                            <div>\r\n                                <Button>제거</Button>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}