{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; // const addPostAPI = (data) => {\n//     return axios.post('/api/post', data);\n// }\n// const addCommentAPI = (data) => {\n//     return axios.post('/api/post/${data.postId}/comment', data);\n// }\n// const removePostAPI = (data) => {\n//     return axios.delete('/api/post/${data.postId}/comment', data);\n// }\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result = yield call(addPostAPI, action.data);\n          // redux-saga 는 여러 액션을 dispatch 할 수 있다.\n          id = shortid.generate();\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            //더미 data :data!\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            //현재 데이타에 게시글 id 있음\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            //더미 data :data!\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/post.js"],"names":["addPost","removePost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","call","put","take","takeEvery","takeLatest","delay","shortid","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","action","id","generate","type","data","content","error","response"],"mappings":"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","sourcesContent":["import { all, fork, call, put, take, takeEvery, takeLatest, delay } from 'redux-saga/effects';\r\nimport shortid from 'shortid';\r\nimport {\r\n    ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n// const addPostAPI = (data) => {\r\n//     return axios.post('/api/post', data);\r\n// }\r\n// const addCommentAPI = (data) => {\r\n//     return axios.post('/api/post/${data.postId}/comment', data);\r\n// }\r\n// const removePostAPI = (data) => {\r\n//     return axios.delete('/api/post/${data.postId}/comment', data);\r\n// }\r\n\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        // redux-saga 는 여러 액션을 dispatch 할 수 있다.\r\n        const id = shortid.generate();\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            //더미 data :data!\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            //현재 데이타에 게시글 id 있음\r\n            data: action.data,\r\n        })\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            //더미 data :data!\r\n            data: action.data,\r\n        })\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}