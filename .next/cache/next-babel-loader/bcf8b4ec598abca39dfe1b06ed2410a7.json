{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\n\nconst dummyPost = data => ({\n  id: data.id,\n  //게시글 ID\n  content: data.content,\n  //게시글 내용\n  User: {\n    //게시글 쓴 유저 정보\n    id: shortId.generate(),\n    nickname: '더미포스트에 있는 닉네임 제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  //댓글 ID\n  content: data,\n  User: {\n    //댓글 쓴 유저 정보\n    id: shortId.generate(),\n    nickname: '재호쨩'\n  }\n}); //노예이름\n\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; //노예 생성함수\n//동적으로 생성하는건 재사용가능성이 높은것들.\n\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const initalState = {\n  //더미데이터를 만들자 \n  // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\n  //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\n  //User,Images,Comments 는 왜 대문자냐?\n  //DB 시퀄라이즈랑 관계가 있음 \n  //id content 는 게시글 자체의 속성이다.\n  //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\n  mainPosts: [{\n    //게시글 id\n    id: shortId.generate(),\n    content: \"첫 번째 게시글 #해시태그 #익스프레스\",\n    User: {\n      //게시글 작성자의 정보 -> id ,닉네임 \n      id: shortId.generate(),\n      nickname: '제로초'\n    },\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }, {\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }, {\n      id: shortId.generate(),\n      src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      content: '우와 개정판이 나왔군요~',\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      }\n    }, {\n      id: shortId.generate(),\n      content: '이거 참 신기한 댓글이군요',\n      User: {\n        id: shortId.generate(),\n        nickname: 'hoya'\n      }\n    }]\n  }],\n  //이미지 업로드하면 경로 쌓임 imagePaths 에 \n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\n\nconst reducer = (state = initalState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //더미데이터 클라->서버 요청하고 응답의 값\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      //현재 action.data => 게시글 id, 유저 id , 댓글 내용 있음\n      //불변성을 지켜줘야한다 ...\n      //불변성의 핵심 은 ★\n      // 바뀌는 것만 새로운 객체로 교체한다. 나머지는 참조를 유지한다.\n      //게시글은 새로 쓸때마다 새로 객체 추가가된다 -> mainPosts: [dummyPost(action.data), ...state.mainPosts],\n      //목표 : 게시글에 있는 댓글에 댓글 내용을 추가해야한다.\n      //1.댓글 객체에 접근하려면 게시글을 먼저 찾고 접근해야한다 (게시글 id를 통해서 찾을거임)\n      //index 는 0번지부터시작. -> 내가 1번게시글에 작성했다치면 , 인덱스는 0 \n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); //2.해당 게시글 get\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]); //3.해당 게시글에 댓글내용 추가\n\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments]; //4.전체 게시글 구해오기\n\n      const mainPosts = [...state.mainPosts]; //5.전체 게시글에 get한 해당 게시글 추가\n\n      mainPosts[postIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //6.추가\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/reducers/post.js"],"names":["shortId","dummyPost","data","id","content","User","generate","nickname","Images","Comments","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPostRequestAction","type","addCommentRequestAction","initalState","mainPosts","src","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id, //게시글 ID\r\n    content: data.content, //게시글 내용\r\n    User: { //게시글 쓴 유저 정보\r\n        id: shortId.generate(),\r\n        nickname: '더미포스트에 있는 닉네임 제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n})\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(), //댓글 ID\r\n    content: data,\r\n    User: { //댓글 쓴 유저 정보\r\n        id: shortId.generate(),\r\n        nickname: '재호쨩',\r\n    },\r\n});\r\n\r\n//노예이름\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\n//노예 생성함수\r\n//동적으로 생성하는건 재사용가능성이 높은것들.\r\nexport const addPostRequestAction = (data) => ({ type: ADD_POST_REQUEST, data });\r\nexport const addCommentRequestAction = (data) => ({ type: ADD_COMMENT_REQUEST, data });\r\n\r\nexport const initalState = {\r\n    //더미데이터를 만들자 \r\n    // 서버쪽에서 데이터를 나한테 어떻게 보낼건지 미리 물어보자.\r\n    //id content 이런건 소문자인데  -> 게시글(post)자체의 속성\r\n    //User,Images,Comments 는 왜 대문자냐?\r\n    //DB 시퀄라이즈랑 관계가 있음 \r\n    //id content 는 게시글 자체의 속성이다.\r\n    //User,Images,Comments 정보(post) 와 다른정보와의 관계가 있으면 대문자로\r\n    mainPosts: [{\r\n        //게시글 id\r\n        id: shortId.generate(),\r\n        content: \"첫 번째 게시글 #해시태그 #익스프레스\",\r\n        User: {\r\n            //게시글 작성자의 정보 -> id ,닉네임 \r\n            id: shortId.generate(),\r\n            nickname: '제로초',\r\n        },\r\n        Images: [\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                src: 'https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyMTA3MzBfODMg%2FMDAxNjI3NjExMjY2NTc4.6y1YAkF-z652ZcMud-GPwH3JimVpuMSLBCwxNZ77NDgg.G2mlr1CY_cGxdszrCWU7sQAWDwmZjelpBCbskEh3zv8g.JPEG.hdglbys%2F21%25A3%25AD07%25A3%25AD30%25A3%25AD09%25A3%25AD37%25A3%25AD52%25A3%25AD877%25A3%25DFdeco.jpg&type=a340',\r\n            }\r\n        ],\r\n        Comments: [\r\n            {\r\n                id: shortId.generate(),\r\n                content: '우와 개정판이 나왔군요~',\r\n                User: {\r\n                    id: shortId.generate(),\r\n                    nickname: 'nero',\r\n                },\r\n            },\r\n            {\r\n                id: shortId.generate(),\r\n                content: '이거 참 신기한 댓글이군요',\r\n                User: {\r\n                    id: shortId.generate(),\r\n                    nickname: 'hoya',\r\n                },\r\n\r\n            },\r\n        ]\r\n    }],\r\n    //이미지 업로드하면 경로 쌓임 imagePaths 에 \r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n}\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                //더미데이터 클라->서버 요청하고 응답의 값\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            }\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error\r\n            }\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            //현재 action.data => 게시글 id, 유저 id , 댓글 내용 있음\r\n            //불변성을 지켜줘야한다 ...\r\n            //불변성의 핵심 은 ★\r\n            // 바뀌는 것만 새로운 객체로 교체한다. 나머지는 참조를 유지한다.\r\n            //게시글은 새로 쓸때마다 새로 객체 추가가된다 -> mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n\r\n            //목표 : 게시글에 있는 댓글에 댓글 내용을 추가해야한다.\r\n            //1.댓글 객체에 접근하려면 게시글을 먼저 찾고 접근해야한다 (게시글 id를 통해서 찾을거임)\r\n            //index 는 0번지부터시작. -> 내가 1번게시글에 작성했다치면 , 인덱스는 0 \r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            //2.해당 게시글 get\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            //3.해당 게시글에 댓글내용 추가\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            //4.전체 게시글 구해오기\r\n            const mainPosts = [...state.mainPosts];\r\n            //5.전체 게시글에 get한 해당 게시글 추가\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                //6.추가\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error\r\n            }\r\n        default: return state;\r\n    }\r\n\r\n\r\n}\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}