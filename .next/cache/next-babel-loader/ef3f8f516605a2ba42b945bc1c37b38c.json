{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects'; // 제너레이터 아님 주의(X)\n// const logInAPI = (data) => {\n//     return axios.post('/api/login', data);\n// };\n// const logOutAPI = () => {\n//     return axios.post('/api/logout');\n// }\n\nfunction* logIn(action) {\n  //login요청 실패염려 때문에 try{} catch();\n  try {\n    // const result = yield call(loginAPI, action.data);\n    console.log('aaaa');\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    console.log('errerr');\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\"\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n} //비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\n\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/dlals/OneDrive/바탕 화면/node-bird/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","logIn","action","console","log","type","data","err","response","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB;AACA,MAAI;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAACJ,MAAM,CAACI;AAFN,KAAD,CAAT;AAIH,GARD,CASA,OAAOC,GAAP,EAAY;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMN,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUG,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GAND,CAOA,OAAOE,GAAP,EAAY;AACR,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AACJ,C,CACD;;;AACA,UAAUI,UAAV,GAAuB;AACnB,QAAMX,UAAU,CAAC,gBAAD,EAAmBE,KAAnB,CAAhB;AACH;;AACD,UAAUU,WAAV,GAAwB;AACpB,QAAMZ,UAAU,CAAC,iBAAD,EAAoBU,MAApB,CAAhB;AACH;;AACD,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMhB,GAAG,CAAC,CACNC,IAAI,CAACa,UAAD,CADE,EAENb,IAAI,CAACc,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\n// 제너레이터 아님 주의(X)\r\n// const logInAPI = (data) => {\r\n//     return axios.post('/api/login', data);\r\n// };\r\n// const logOutAPI = () => {\r\n//     return axios.post('/api/logout');\r\n// }\r\nfunction* logIn(action) {\r\n    //login요청 실패염려 때문에 try{} catch();\r\n    try {\r\n        // const result = yield call(loginAPI, action.data);\r\n        console.log('aaaa');\r\n        yield delay(1000);\r\n        yield put({\r\n            type: \"LOG_IN_SUCCESS\",\r\n            data:action.data\r\n        });\r\n    }\r\n    catch (err) {\r\n        console.log('errerr');\r\n        yield put({\r\n            type: \"LOG_IN_FAILURE\",\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: \"LOG_OUT_SUCCESS\",\r\n        });\r\n    }\r\n    catch (err) {\r\n        yield put({\r\n            type: \"LOG_OUT_FAILURE\",\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n//비동기 액션 크리에이터 (이벤트리스너 처럼 생각)\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}